;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name syng-im.protocol.api, :imports nil, :requires {log syng-im.utils.logging, syng-im.protocol.handler syng-im.protocol.handler, syng-im.protocol.user-handler syng-im.protocol.user-handler, syng-im.utils.logging syng-im.utils.logging, syng-im.utils.random syng-im.utils.random, syng-im.protocol.defaults syng-im.protocol.defaults, cljs.core.async cljs.core.async, syng-im.protocol.web3 syng-im.protocol.web3, state syng-im.protocol.state.state, syng-im.protocol.group-chat syng-im.protocol.group-chat, syng-im.utils.encryption syng-im.utils.encryption, syng-im.protocol.state.group-chat syng-im.protocol.state.group-chat, syng-im.protocol.delivery syng-im.protocol.delivery, syng-im.protocol.state.delivery syng-im.protocol.state.delivery, syng-im.protocol.state.state syng-im.protocol.state.state, random syng-im.utils.random}, :uses {get-keypair syng-im.protocol.state.group-chat, timeout cljs.core.async, removed-from-group-msg syng-im.protocol.group-chat, get-identities syng-im.protocol.state.group-chat, connection syng-im.protocol.state.state, <! cljs.core.async, start-delivery-loop syng-im.protocol.delivery, save-identities syng-im.protocol.state.group-chat, get-peer-identities syng-im.protocol.state.group-chat, handle-incoming-whisper-msg syng-im.protocol.handler, create-identity syng-im.protocol.web3, save-keypair syng-im.protocol.state.group-chat, set-identity syng-im.protocol.state.state, set-storage syng-im.protocol.state.state, save-group-admin syng-im.protocol.state.group-chat, set-handler syng-im.protocol.state.state, default-content-type syng-im.protocol.defaults, set-connection syng-im.protocol.state.state, add-identity syng-im.protocol.web3, make-msg syng-im.protocol.web3, make-web3 syng-im.protocol.web3, add-pending-message syng-im.protocol.state.delivery, listen syng-im.protocol.web3, new-keypair syng-im.utils.encryption, stop-listener syng-im.protocol.web3, remove-group-data syng-im.protocol.state.group-chat, group-admin? syng-im.protocol.state.group-chat, send-group-msg syng-im.protocol.group-chat, invoke-user-handler syng-im.protocol.user-handler, group-remove-participant-msg syng-im.protocol.group-chat, post-msg syng-im.protocol.web3, storage syng-im.protocol.state.state, init-group-chat-msg syng-im.protocol.group-chat, group-add-participant-msg syng-im.protocol.group-chat}, :defs {init-protocol {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([{:keys [handler ethereum-rpc-url storage identity active-group-ids]}])), :doc "Required [handler ethereum-rpc-url storage]\n   Optional [identity - if not passed a new identity is created automatically\n             active-group-ids - list of active group ids]\n\n   (fn handler [{:keys [event-type...}])\n\n   :event-type can be:\n\n   :new-msg - [from to payload]\n   :new-group-msg [from group-id payload]\n   :error - [error-msg details]\n   :msg-acked [msg-id from]\n   :delivery-failed [msg-id]\n   :new-group-chat [from group-id]\n   :group-chat-invite-acked [ack-msg-id from group-id]\n   :group-new-participant [identity group-id from msg-id]\n   :group-removed-participant [from identity group-id msg-id]\n   :removed-from-group [from group-id msg-id]\n   :participant-left-group [from group-id msg-id]\n   :initialized [identity]\n\n   :new-msg, new-group-msg, msg-acked should be handled idempotently (may be called multiple times for the same msg-id)\n   "}, :name syng-im.protocol.api/init-protocol, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 20, :method-params ([p__24925]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [handler ethereum-rpc-url storage identity active-group-ids]}])), :doc "Required [handler ethereum-rpc-url storage]\n   Optional [identity - if not passed a new identity is created automatically\n             active-group-ids - list of active group ids]\n\n   (fn handler [{:keys [event-type...}])\n\n   :event-type can be:\n\n   :new-msg - [from to payload]\n   :new-group-msg [from group-id payload]\n   :error - [error-msg details]\n   :msg-acked [msg-id from]\n   :delivery-failed [msg-id]\n   :new-group-chat [from group-id]\n   :group-chat-invite-acked [ack-msg-id from group-id]\n   :group-new-participant [identity group-id from msg-id]\n   :group-removed-participant [from identity group-id msg-id]\n   :removed-from-group [from group-id msg-id]\n   :participant-left-group [from group-id msg-id]\n   :initialized [identity]\n\n   :new-msg, new-group-msg, msg-acked should be handled idempotently (may be called multiple times for the same msg-id)\n   "}, send-user-msg {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 88, :column 7, :end-line 88, :end-column 20, :arglists (quote ([{:keys [to content]}]))}, :name syng-im.protocol.api/send-user-msg, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 20, :method-params ([p__25224]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [to content]}]))}, leave-group-chat {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 166, :column 7, :end-line 166, :end-column 23, :arglists (quote ([group-id]))}, :name syng-im.protocol.api/leave-group-chat, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 23, :method-params ([group-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group-id]))}, send-group-user-msg {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 98, :column 7, :end-line 98, :end-column 26, :arglists (quote ([{:keys [group-id content]}]))}, :name syng-im.protocol.api/send-group-user-msg, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 26, :method-params ([p__25233]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [group-id content]}]))}, my-identity {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 42, :column 7, :end-line 42, :end-column 18, :arglists (quote ([]))}, :name syng-im.protocol.api/my-identity, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, group-remove-participant {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 145, :column 7, :end-line 145, :end-column 31, :arglists (quote ([group-id identity-to-remove])), :doc "Only call if you are the group-admin"}, :name syng-im.protocol.api/group-remove-participant, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 31, :method-params ([group-id identity-to-remove]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group-id identity-to-remove])), :doc "Only call if you are the group-admin"}, start-group-chat {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 104, :column 7, :end-line 104, :end-column 23, :arglists (quote ([identities] [identities group-name])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([identities] [identities group-name]), :arglists ([identities] [identities group-name]), :arglists-meta (nil nil)}}, :name syng-im.protocol.api/start-group-chat, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([identities] [identities group-name]), :arglists ([identities] [identities group-name]), :arglists-meta (nil nil)}, :method-params ([identities] [identities group-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists ([identities] [identities group-name])}, group-add-participant {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 125, :column 7, :end-line 125, :end-column 28, :arglists (quote ([group-id new-peer-identity])), :doc "Only call if you are the group-admin"}, :name syng-im.protocol.api/group-add-participant, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 28, :method-params ([group-id new-peer-identity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group-id new-peer-identity])), :doc "Only call if you are the group-admin"}, current-connection {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 176, :column 7, :end-line 176, :end-column 25, :arglists (quote ([]))}, :name syng-im.protocol.api/current-connection, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, create-connection {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :line 39, :column 7, :end-line 39, :end-column 24, :arglists (quote ([ethereum-rpc-url]))}, :name syng-im.protocol.api/create-connection, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/protocol/api.cljs", :end-column 24, :method-params ([ethereum-rpc-url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ethereum-rpc-url]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:identity :msg-id :payload :private :else :initialized :user-msg :group-id :group-new-participant :content :public :recur :msg :type :internal? :left-group :topics :from :content-type :active-group-ids :storage :group-user-msg :ethereum-rpc-url :handler :to}, :order [:handler :ethereum-rpc-url :storage :identity :active-group-ids :recur :public :private :topics :initialized :else :to :content :from :payload :content-type :type :user-msg :msg-id :msg :group-id :group-user-msg :internal? :group-new-participant :left-group]}, :doc nil}