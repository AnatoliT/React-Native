;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name syng-im.handlers.contacts, :imports nil, :requires {log syng-im.utils.logging, syng-im.utils.logging syng-im.utils.logging, async cljs.core.async, syng-im.utils.phone-number syng-im.utils.phone-number, syng-im.models.contacts syng-im.models.contacts, syng-im.utils.utils syng-im.utils.utils, cljs.core.async cljs.core.async, cstr clojure.string, clojure.string clojure.string, syng-im.utils.crypt syng-im.utils.crypt, contacts-model syng-im.models.contacts, re-frame.core re-frame.core}, :uses {on-error syng-im.utils.utils, subscribe re-frame.core, log syng-im.utils.utils, <! cljs.core.async, http-post syng-im.utils.utils, chan cljs.core.async, dispatch-sync re-frame.core, format-phone-number syng-im.utils.phone-number, encrypt syng-im.utils.crypt, dispatch re-frame.core, toast syng-im.utils.utils, put! cljs.core.async}, :defs {get-contact-name {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :line 12, :column 8, :end-line 12, :end-column 24, :private true, :arglists (quote ([phone-contact]))}, :private true, :name syng-im.handlers.contacts/get-contact-name, :variadic false, :file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :end-column 24, :method-params ([phone-contact]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([phone-contact]))}, to-syng-contacts {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :line 19, :column 8, :end-line 19, :end-column 24, :private true, :arglists (quote ([contacts-by-hash data]))}, :private true, :name syng-im.handlers.contacts/to-syng-contacts, :variadic false, :file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :end-column 24, :method-params ([contacts-by-hash data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([contacts-by-hash data]))}, get-contacts-by-hash {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :line 30, :column 8, :end-line 30, :end-column 28, :private true, :arglists (quote ([contacts]))}, :private true, :name syng-im.handlers.contacts/get-contacts-by-hash, :variadic false, :file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :end-column 28, :method-params ([contacts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([contacts]))}, request-syng-contacts {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :line 46, :column 8, :end-line 46, :end-column 29, :private true, :arglists (quote ([contacts]))}, :private true, :name syng-im.handlers.contacts/request-syng-contacts, :variadic false, :file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :end-column 29, :method-params ([contacts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([contacts]))}, sync-contacts {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :line 56, :column 7, :end-line 56, :end-column 20, :arglists (quote ([handler]))}, :name syng-im.handlers.contacts/sync-contacts, :variadic false, :file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/handlers/contacts.cljs", :end-column 20, :method-params ([handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([handler]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:middleName :phone-number :else :phone-number-hash :number :contacts :name :recur :familyName :photo-path :givenName :phone-numbers :load-syng-contacts :error :whisper-identity :phone-number-hashes :contact}, :order [:givenName :middleName :familyName :phone-number-hash :contact :phone-number :whisper-identity :name :photo-path :number :contacts :phone-numbers :phone-number-hashes :error :recur :load-syng-contacts :else]}, :doc nil}