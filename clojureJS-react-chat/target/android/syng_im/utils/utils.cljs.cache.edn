;; Analyzed by ClojureScript 1.7.170
{:use-macros {get-item natal-shell.async-storage, alert natal-shell.alert, set-item natal-shell.async-storage}, :excludes #{}, :name syng-im.utils.utils, :imports nil, :requires {const syng-im.constants, syng-im.constants syng-im.constants}, :uses nil, :defs {log {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/utils/utils.cljs", :line 8, :column 7, :end-line 8, :end-column 10, :arglists (quote ([obj]))}, :name syng-im.utils.utils/log, :variadic false, :file "src/syng_im/utils/utils.cljs", :end-column 10, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, toast {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/utils/utils.cljs", :line 11, :column 7, :end-line 11, :end-column 12, :arglists (quote ([s]))}, :name syng-im.utils.utils/toast, :variadic false, :file "src/syng_im/utils/utils.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, on-error {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/utils/utils.cljs", :line 14, :column 7, :end-line 14, :end-column 15, :arglists (quote ([error]))}, :name syng-im.utils.utils/on-error, :variadic false, :file "src/syng_im/utils/utils.cljs", :end-column 15, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, http-post {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/utils/utils.cljs", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([action data on-success] [action data on-success on-error])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([action data on-success] [action data on-success on-error]), :arglists ([action data on-success] [action data on-success on-error]), :arglists-meta (nil nil)}}, :name syng-im.utils.utils/http-post, :variadic false, :file "src/syng_im/utils/utils.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([action data on-success] [action data on-success on-error]), :arglists ([action data on-success] [action data on-success on-error]), :arglists-meta (nil nil)}, :method-params ([action data on-success] [action data on-success on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists ([action data on-success] [action data on-success on-error])}, http-get {:protocol-inline nil, :meta {:file "/Work/Dev_Work/Upwork/status-im/status-react/src/syng_im/utils/utils.cljs", :line 38, :column 7, :end-line 38, :end-column 15, :arglists (quote ([action on-success on-error]))}, :name syng-im.utils.utils/http-get, :variadic false, :file "src/syng_im/utils/utils.cljs", :end-column 15, :method-params ([action on-success on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([action on-success on-error]))}}, :require-macros {natal-shell.async-storage natal-shell.async-storage, natal-shell.alert natal-shell.alert, toast natal-shell.toast-android, natal-shell.toast-android natal-shell.toast-android}, :cljs.analyzer/constants {:seen #{:method :headers :content-type :body :keywordize-keys :accept}, :order [:method :headers :body :accept :content-type :keywordize-keys]}, :doc nil}