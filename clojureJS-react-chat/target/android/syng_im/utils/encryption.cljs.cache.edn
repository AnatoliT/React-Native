;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name syng-im.utils.encryption, :imports nil, :requires {cljsjs.chance cljsjs.chance, cljsjs.eccjs cljsjs.eccjs}, :uses nil, :defs {default-curve {:name syng-im.utils.encryption/default-curve, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 5, :column 1, :end-line 5, :end-column 19, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 5, :column 6, :end-line 5, :end-column 19}}, new-keypair {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 7, :column 7, :end-line 7, :end-column 18, :arglists (quote ([])), :doc "Returns {:private \"private key\" :public \"public key\""}, :name syng-im.utils.encryption/new-keypair, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns {:private \"private key\" :public \"public key\""}, encrypt {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 15, :column 7, :end-line 15, :end-column 14, :arglists (quote ([public-key content]))}, :name syng-im.utils.encryption/encrypt, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :end-column 14, :method-params ([public-key content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([public-key content]))}, decrypt {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 18, :column 7, :end-line 18, :end-column 14, :arglists (quote ([private-key content]))}, :name syng-im.utils.encryption/decrypt, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :end-column 14, :method-params ([private-key content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([private-key content]))}, password-encrypt {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 21, :column 7, :end-line 21, :end-column 23, :arglists (quote ([password content]))}, :name syng-im.utils.encryption/password-encrypt, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :end-column 23, :method-params ([password content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([password content]))}, password-decrypt {:protocol-inline nil, :meta {:file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :line 25, :column 7, :end-line 25, :end-column 23, :arglists (quote ([password content]))}, :name syng-im.utils.encryption/password-decrypt, :variadic false, :file "file:/C:/Users/MC/.m2/repository/syng-im/protocol/0.1.1/protocol-0.1.1.jar!/syng_im/utils/encryption.cljs", :end-column 23, :method-params ([password content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([password content]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:private :public :enc :dec :keywordize-keys}, :order [:keywordize-keys :enc :dec :private :public]}, :doc nil}